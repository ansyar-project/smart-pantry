// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id              String         @id @default(cuid())
  email           String         @unique
  name            String?
  avatar          String?
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  pantryItems     PantryItem[]
  shoppingLists   ShoppingList[]
  pantryMembers   PantryMember[]
  alerts          Alert[]
  recipes         Recipe[]       // User-created recipes
  mealPlans       MealPlan[]
  recipeRatings   RecipeRating[]
  
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Pantry System
model Pantry {
  id              String         @id @default(cuid())
  name            String         @default("My Pantry")
  description     String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  items           PantryItem[]
  members         PantryMember[]
  
  @@map("pantries")
}

model PantryMember {
  id              String         @id @default(cuid())
  userId          String
  pantryId        String
  role            MemberRole     @default(MEMBER)
  joinedAt        DateTime       @default(now())
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pantry          Pantry         @relation(fields: [pantryId], references: [id], onDelete: Cascade)
  
  @@unique([userId, pantryId])
  @@map("pantry_members")
}

model PantryItem {
  id              String         @id @default(cuid())
  userId          String
  pantryId        String
  
  // Item Details
  name            String
  brand           String?
  category        FoodCategory
  barcode         String?
  
  // Quantity & Storage
  quantity        Float
  unit            String         @default("pieces")
  location        StorageLocation @default(PANTRY)
  
  // Dates
  purchaseDate    DateTime?
  expiryDate      DateTime?
  openedDate      DateTime?
  
  // Cost Tracking
  price           Float?
  currency        String         @default("USD")
  
  // Metadata
  notes           String?
  imageUrl        String?
  nutritionData   Json?          // Store API nutrition data
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pantry          Pantry         @relation(fields: [pantryId], references: [id], onDelete: Cascade)
  alerts          Alert[]
  usageHistory    ItemUsage[]
  
  @@map("pantry_items")
}

// Recipe System
model Recipe {
  id              String         @id @default(cuid())
  userId          String?        // null for system/public recipes
  
  // Recipe Details
  name            String
  description     String?
  instructions    String
  prepTime        Int?           // minutes
  cookTime        Int?           // minutes
  servings        Int            @default(4)
  difficulty      Difficulty     @default(MEDIUM)
  
  // Classification
  cuisine         String?
  category        RecipeCategory @default(MAIN_COURSE)
  tags            String[]       // ["vegetarian", "quick", "healthy"]
  
  // Media
  imageUrl        String?
  videoUrl        String?
  
  // Metadata
  rating          Float?         @default(0)
  totalRatings    Int            @default(0)
  isPublic        Boolean        @default(false)
  source          String?        // URL or book reference
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  ingredients     RecipeIngredient[]
  mealPlans       MealPlanRecipe[]
  ratings         RecipeRating[]
  
  @@map("recipes")
}

model RecipeIngredient {
  id              String         @id @default(cuid())
  recipeId        String
  
  // Ingredient Details
  name            String
  category        FoodCategory?
  quantity        Float
  unit            String
  isOptional      Boolean        @default(false)
  notes           String?        // "finely chopped", "room temperature"
  
  // Relations
  recipe          Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@map("recipe_ingredients")
}

// Alert System
model Alert {
  id              String         @id @default(cuid())
  userId          String
  pantryItemId    String?
  
  type            AlertType
  title           String
  message         String
  priority        AlertPriority  @default(MEDIUM)
  
  // Status
  isRead          Boolean        @default(false)
  isDismissed     Boolean        @default(false)
  
  // Scheduling
  scheduledFor    DateTime?
  sentAt          DateTime?
  
  createdAt       DateTime       @default(now())
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  pantryItem      PantryItem?    @relation(fields: [pantryItemId], references: [id], onDelete: Cascade)
  
  @@map("alerts")
}

// Shopping & Planning
model ShoppingList {
  id              String         @id @default(cuid())
  userId          String
  name            String         @default("Shopping List")
  
  isCompleted     Boolean        @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           ShoppingItem[]
  
  @@map("shopping_lists")
}

model ShoppingItem {
  id              String         @id @default(cuid())
  shoppingListId  String
  
  name            String
  quantity        Float          @default(1)
  unit            String         @default("pieces")
  category        FoodCategory?
  estimatedPrice  Float?
  
  isCompleted     Boolean        @default(false)
  completedAt     DateTime?
  
  notes           String?
  
  // Relations
  shoppingList    ShoppingList   @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  
  @@map("shopping_items")
}

model MealPlan {
  id              String         @id @default(cuid())
  userId          String
  
  name            String
  startDate       DateTime
  endDate         DateTime
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes         MealPlanRecipe[]
  
  @@map("meal_plans")
}

model MealPlanRecipe {
  id              String         @id @default(cuid())
  mealPlanId      String
  recipeId        String
  
  scheduledDate   DateTime
  mealType        MealType       @default(DINNER)
  servings        Int            @default(4)
  
  // Relations
  mealPlan        MealPlan       @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe          Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  
  @@unique([mealPlanId, scheduledDate, mealType])
  @@map("meal_plan_recipes")
}

// Analytics & Tracking
model ItemUsage {
  id              String         @id @default(cuid())
  pantryItemId    String
  
  quantityUsed    Float
  usedFor         String?        // Recipe name or "consumed"
  usedAt          DateTime       @default(now())
  
  // Relations
  pantryItem      PantryItem     @relation(fields: [pantryItemId], references: [id], onDelete: Cascade)
  
  @@map("item_usage")
}

model RecipeRating {
  id              String         @id @default(cuid())
  recipeId        String
  userId          String
  
  rating          Int            // 1-5 stars
  review          String?
  
  createdAt       DateTime       @default(now())
  
  // Relations
  recipe          Recipe         @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([recipeId, userId])
  @@map("recipe_ratings")
}

// Enums
enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum FoodCategory {
  PRODUCE
  DAIRY
  MEAT
  SEAFOOD
  GRAINS
  PANTRY_STAPLES
  FROZEN
  BEVERAGES
  SNACKS
  CONDIMENTS
  SPICES
  BAKING
  CANNED_GOODS
  OTHER
}

enum StorageLocation {
  PANTRY
  REFRIGERATOR
  FREEZER
  SPICE_RACK
  WINE_CELLAR
  OTHER
}

enum AlertType {
  EXPIRY_WARNING
  EXPIRY_URGENT
  LOW_STOCK
  SHOPPING_REMINDER
  RECIPE_SUGGESTION
  SYSTEM
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum RecipeCategory {
  BREAKFAST
  APPETIZER
  SOUP
  SALAD
  MAIN_COURSE
  SIDE_DISH
  DESSERT
  BEVERAGE
  SNACK
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}
